# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):
    a = [1,1]
    i = 1
    for i in range(m-2):
        a.append(a[i]+a[i+1])  
    return(a[n-1:m]) 

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

def sort_to_max(origin_list):
    a = origin_list
    n = 0
    for i in range(len(a)-1) :
        for i in range(len(a)-1) :
            if a[i] < a[i+1]:
                n = a[i]
                a[i] = a[i+1]
                a[i+1] = n
    return(a)

sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

def filter_(obj, ite):
    
#ite = [1, 2, 3, 4, 5, 6]
#obj = lambda x : x % 2 == 0

    ite_return = []
    
    for i in range(len(ite)):
        x = ite[i]
        if obj(x) is True:
            ite_return.append(ite[i])
            
    return(ite_return)   

print(filter_((lambda x : x % 2 == 0),[1, 2, 3, 4, 5, 6])) 

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

def is_parallelogram(*a):
"""
Функция принемает список из восьми последовательных координат вершин параллелограмма
"""
    print(a)
    a[0] + a[6] == a[2] + a[4]
    a[1] + a[7] == a[3] + a[5]
    return(a[0] + a[6] == a[2] + a[4] and a[1] + a[7] == a[3] + a[5])

print(parallelogram(1, 1, 4, 1, 2, 3, 5, 3))